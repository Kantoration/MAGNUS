/**
 * Interactive setup wizard for AutoMessager
 * Creates or updates .env file with user-provided configuration
 */
import prompts from 'prompts';
import { promises as fs } from 'fs';
import path from 'path';
import { platform, homedir } from 'os';

export interface WizardResult {
  success: boolean;
  envPath: string;
  warnings: string[];
}

/**
 * Normalize path separators for the current platform
 */
function normalizePath(p: string): string {
  if (platform() === 'win32') {
    // Convert forward slashes to backslashes on Windows
    return p.replace(/\//g, '\\');
  }
  return p;
}

/**
 * Get default Excel path based on platform
 * Uses user's home directory + Desktop on Windows, cwd on others
 */
function getDefaultExcelPath(): string {
  if (platform() === 'win32') {
    // Windows: Try Desktop folder in user's home directory
    const desktop = path.join(homedir(), 'Desktop', 'massege_maping.xlsx');
    return normalizePath(desktop);
  }
  // macOS/Linux: Use current working directory
  return './massege_maping.xlsx';
}

/**
 * Check if a file exists
 */
async function fileExists(filePath: string): Promise<boolean> {
  try {
    await fs.access(filePath);
    return true;
  } catch {
    return false;
  }
}

/**
 * Build .env file content from answers
 */
function buildEnvContent(answers: Record<string, any>): string {
  const lines: string[] = [
    '# AutoMessager Configuration',
    '# Generated by setup wizard',
    '',
    '# Salesforce Configuration',
    `SF_LOGIN_URL=${answers.sfLoginUrl}`,
    `SF_USERNAME=${answers.sfUsername}`,
    `SF_PASSWORD=${answers.sfPassword}`,
    `SF_TOKEN=${answers.sfToken}`,
    '',
    '# Glassix Configuration',
    `GLASSIX_BASE_URL=${answers.glassixBaseUrl}`,
  ];

  if (answers.glassixAuthMode === 'modern') {
    lines.push(`GLASSIX_API_KEY=${answers.glassixApiKey}`);
    lines.push(`GLASSIX_API_SECRET=${answers.glassixApiSecret}`);
  } else {
    lines.push(`GLASSIX_API_KEY=${answers.glassixLegacyKey}`);
  }

  lines.push('');
  lines.push('# Glassix API Settings');
  lines.push(`GLASSIX_API_MODE=${answers.glassixApiMode || 'messages'}`);
  lines.push('GLASSIX_TIMEOUT_MS=15000');
  lines.push('');
  lines.push('# Salesforce Query Settings');
  lines.push('TASKS_QUERY_LIMIT=200');
  lines.push(`TASK_CUSTOM_PHONE_FIELD=${answers.taskPhoneField || 'Phone__c'}`);
  lines.push('');
  lines.push('# Excel Mapping Configuration');
  lines.push(`XSLX_MAPPING_PATH=${answers.excelPath}`);
  if (answers.excelSheet) {
    lines.push(`XSLX_SHEET=${answers.excelSheet}`);
  }
  lines.push('');
  lines.push('# Application Behavior');
  lines.push(`KEEP_READY_ON_FAIL=${answers.keepReadyOnFail !== false}`);
  lines.push(`PERMIT_LANDLINES=${answers.permitLandlines === true}`);
  lines.push('DEFAULT_LANG=he');
  lines.push('');
  lines.push('# Retry Configuration');
  lines.push('RETRY_ATTEMPTS=3');
  lines.push('RETRY_BASE_MS=300');
  lines.push('');
  lines.push('# Logging');
  lines.push('LOG_LEVEL=info');
  lines.push('');

  return lines.join('\n');
}

/**
 * Run the interactive setup wizard
 */
export async function runWizard(): Promise<WizardResult> {
  const warnings: string[] = [];
  
  console.log('\nüöÄ AutoMessager Setup Wizard\n');
  console.log('This wizard will help you configure AutoMessager.\n');
  console.log(`Platform: ${platform()}\n`);

  try {
    // Detect if .env already exists
    const projectRoot = process.cwd();
    const envPath = path.join(projectRoot, '.env');
    const envExists = await fileExists(envPath);

    if (envExists) {
      const { confirmOverwrite } = await prompts({
        type: 'confirm',
        name: 'confirmOverwrite',
        message: '.env file already exists. Overwrite?',
        initial: false,
      });

      if (!confirmOverwrite) {
        return {
          success: false,
          envPath,
          warnings: ['Setup cancelled by user'],
        };
      }
    }

    // Step 1: Salesforce Configuration
    console.log('\nüìä Salesforce Configuration\n');
    
    const sfAnswers = await prompts([
      {
        type: 'text',
        name: 'sfLoginUrl',
        message: 'Salesforce Login URL:',
        initial: 'https://login.salesforce.com',
        validate: (value: string) =>
          value.startsWith('https://') || 'Must be a valid HTTPS URL',
      },
      {
        type: 'text',
        name: 'sfUsername',
        message: 'Salesforce Username (email):',
        validate: (value: string) =>
          value.includes('@') || 'Must be a valid email',
      },
      {
        type: 'password',
        name: 'sfPassword',
        message: 'Salesforce Password:',
        validate: (value: string) => value.length > 0 || 'Password is required',
      },
      {
        type: 'password',
        name: 'sfToken',
        message: 'Salesforce Security Token:',
        validate: (value: string) => value.length > 0 || 'Security token is required',
      },
    ]);

    if (!sfAnswers.sfUsername) {
      return {
        success: false,
        envPath,
        warnings: ['Setup cancelled by user'],
      };
    }

    // Step 2: Glassix Configuration
    console.log('\nüí¨ Glassix Configuration\n');

    const glassixBaseAnswers = await prompts([
      {
        type: 'text',
        name: 'glassixBaseUrl',
        message: 'Glassix API Base URL:',
        initial: 'https://api.glassix.com',
        validate: (value: string) =>
          value.startsWith('https://') || 'Must be a valid HTTPS URL',
      },
      {
        type: 'select',
        name: 'glassixAuthMode',
        message: 'Authentication mode:',
        choices: [
          {
            title: 'Modern (recommended): API key + secret (access token)',
            value: 'modern',
          },
          {
            title: 'Legacy (temporary): direct bearer key',
            value: 'legacy',
          },
        ],
        initial: 0,
      },
    ]);

    if (!glassixBaseAnswers.glassixBaseUrl) {
      return {
        success: false,
        envPath,
        warnings: ['Setup cancelled by user'],
      };
    }

    let glassixAuthAnswers: any;

    if (glassixBaseAnswers.glassixAuthMode === 'modern') {
      glassixAuthAnswers = await prompts([
        {
          type: 'password',
          name: 'glassixApiKey',
          message: 'Glassix API Key:',
          validate: (value: string) => value.length > 0 || 'API key is required',
        },
        {
          type: 'password',
          name: 'glassixApiSecret',
          message: 'Glassix API Secret:',
          validate: (value: string) => value.length > 0 || 'API secret is required',
        },
      ]);
    } else {
      glassixAuthAnswers = await prompts([
        {
          type: 'password',
          name: 'glassixLegacyKey',
          message: 'Glassix API Key (legacy):',
          validate: (value: string) => value.length > 0 || 'API key is required',
        },
      ]);
      
      warnings.push(
        'Using legacy authentication mode. Consider migrating to modern access token flow for better security.'
      );
    }

    if (!glassixAuthAnswers.glassixApiKey && !glassixAuthAnswers.glassixLegacyKey) {
      return {
        success: false,
        envPath,
        warnings: ['Setup cancelled by user'],
      };
    }

    const glassixModeAnswers = await prompts([
      {
        type: 'select',
        name: 'glassixApiMode',
        message: 'Glassix API mode:',
        choices: [
          { title: 'messages (standard)', value: 'messages' },
          { title: 'protocols (advanced)', value: 'protocols' },
        ],
        initial: 0,
      },
    ]);

    // Step 3: Excel Mapping Configuration
    console.log('\nüìã Excel Mapping Configuration\n');

    const defaultExcelPath = getDefaultExcelPath();
    const excelAnswers = await prompts([
      {
        type: 'text',
        name: 'excelPath',
        message: 'Excel mapping file path:',
        initial: defaultExcelPath,
        validate: (value: string) => value.length > 0 || 'Path is required',
      },
      {
        type: 'text',
        name: 'excelSheet',
        message: 'Excel sheet name or index (optional, leave empty for first sheet):',
        initial: '',
      },
    ]);

    if (!excelAnswers.excelPath) {
      return {
        success: false,
        envPath,
        warnings: ['Setup cancelled by user'],
      };
    }

    // Normalize the Excel path
    const normalizedExcelPath = normalizePath(excelAnswers.excelPath);

    // Check if Excel file exists
    const excelExists = await fileExists(normalizedExcelPath);
    if (!excelExists) {
      warnings.push(
        `Excel file not found at: ${normalizedExcelPath}. Please ensure the file exists before running AutoMessager.`
      );
    }

    // Step 4: Behavior Configuration
    console.log('\n‚öôÔ∏è  Behavior Configuration\n');

    const behaviorAnswers = await prompts([
      {
        type: 'text',
        name: 'taskPhoneField',
        message: 'Custom phone field on Task object:',
        initial: 'Phone__c',
      },
      {
        type: 'confirm',
        name: 'permitLandlines',
        message: 'Allow landline phone numbers?',
        initial: false,
      },
      {
        type: 'confirm',
        name: 'keepReadyOnFail',
        message: 'Keep Ready_for_Automation__c=true on failure (for retry)?',
        initial: true,
      },
    ]);

    // Combine all answers
    const allAnswers = {
      ...sfAnswers,
      ...glassixBaseAnswers,
      ...glassixAuthAnswers,
      ...glassixModeAnswers,
      ...excelAnswers,
      excelPath: normalizedExcelPath,
      ...behaviorAnswers,
    };

    // Build .env content
    const envContent = buildEnvContent(allAnswers);

    // Write .env file
    await fs.writeFile(envPath, envContent, 'utf-8');

    console.log('\n‚úÖ Configuration saved to .env\n');

    // Show next steps
    console.log('üìå Next Steps:\n');
    console.log('  1. Verify configuration:');
    console.log('     automessager verify\n');
    console.log('  2. Test with dry-run:');
    console.log('     automessager dry-run\n');
    console.log('  3. Run live:');
    console.log('     automessager run\n');

    if (platform() === 'win32') {
      console.log('  4. Schedule daily runs (Windows Task Scheduler):');
      console.log('     Open PowerShell as Administrator:');
      console.log('     .\\scripts\\windows\\Install-Task.ps1 -Hour 9 -Minute 0\n');
      console.log('     To remove scheduled task:');
      console.log('     .\\scripts\\windows\\Uninstall-Task.ps1\n');
    }

    if (warnings.length > 0) {
      console.log('‚ö†Ô∏è  Warnings:\n');
      warnings.forEach((w) => console.log(`  - ${w}`));
      console.log('');
    }

    return {
      success: true,
      envPath,
      warnings,
    };
  } catch (error) {
    return {
      success: false,
      envPath: path.join(process.cwd(), '.env'),
      warnings: [
        `Wizard failed: ${error instanceof Error ? error.message : String(error)}`,
      ],
    };
  }
}

